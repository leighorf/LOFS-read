diff -ur vis5d+-1.2.1/src/binio.h vis5d+-1.2.1_64/src/binio.h
--- vis5d+-1.2.1/src/binio.h	Wed Nov  7 06:52:58 2001
+++ vis5d+-1.2.1_64/src/binio.h	Sun Jan  6 22:27:30 2002
@@ -42,6 +42,9 @@
 #include <unistd.h>
 #include <fcntl.h>
 
+/* ORF */
+#define lseek lseek64
+
 /* SGJ: use extern "C" if included from a C++ file: */
 #ifdef __cplusplus
 extern "C" {
diff -ur vis5d+-1.2.1/src/v5d.c vis5d+-1.2.1_64/src/v5d.c
--- vis5d+-1.2.1/src/v5d.c	Wed Nov  7 06:53:27 2001
+++ vis5d+-1.2.1_64/src/v5d.c	Mon Jan  7 09:18:49 2002
@@ -204,7 +204,7 @@
  */
 static off_t ltell( int f )
 {
-   return lseek( f, 0, SEEK_CUR );
+   return lseek( f, (off64_t)0, SEEK_CUR );
 }
 
 
@@ -506,9 +506,10 @@
  *         time, var - which timestep and variable.
  * Return:  file offset in bytes
  */
-static int grid_position( const v5dstruct *v, int time, int var )
+static int64_t grid_position( const v5dstruct *v, int time, int var )
 {
-   int pos, i;
+   int64_t pos;
+   int i;
 
    assert( time >= 0 );
    assert( var >= 0 );
@@ -1369,7 +1370,7 @@
    unsigned int id;
 
    /* reset file position to start of file */
-   lseek( f, 0, SEEK_SET );
+   lseek( f, (off64_t)0, SEEK_SET );
 
    /* read file ID */
    read_int4( f, (int *) &id );
@@ -1468,7 +1469,7 @@
             read_float4( f, &gb );
 
             /* skip ahead by 'gridsize' bytes */
-            if (lseek( f, gridsize, SEEK_CUR )==-1) {
+            if (lseek( f, (off64_t)gridsize, SEEK_CUR )==-1) {
                printf("Error:  Unexpected end of file, ");
                printf("file may be corrupted.\n");
                return 0;
@@ -1598,7 +1599,7 @@
 static int read_comp_grid( v5dstruct *v, int time, int var,
                            float *ga, float *gb, void *compdata )
 {
-   unsigned int pos;
+   int64_t pos;
    V5Dubyte bias;
    int i, n, nl;
    int f;
@@ -1608,7 +1609,7 @@
 
    /* move to position in file */
    pos = grid_position( v, time, var );
-   lseek( f, pos, SEEK_SET );
+   lseek( f, (off64_t)pos, SEEK_SET );
 
    if (v->FileFormat==0x80808083) {
       /* read McIDAS grid and file numbers */
@@ -1681,7 +1682,7 @@
  */
 static int read_v5d_header( v5dstruct *v )
 {
-#define SKIP(N)   lseek( f, N, SEEK_CUR )
+#define SKIP(N)   lseek( f, (off64_t)N, SEEK_CUR )
    int end_of_header = 0;
    unsigned int id;
    int idlen, var, numargs;
@@ -2014,13 +2015,13 @@
          case TAG_END:
             /* end of header */
             end_of_header = 1;
-            lseek( f, length, SEEK_CUR );
+            lseek( f, (off64_t)length, SEEK_CUR );
             break;
 
          default:
             /* unknown tag, skip to next tag */
             printf("Unknown tag: %d  length=%d\n", tag, length );
-            lseek( f, length, SEEK_CUR );
+            lseek( f, (off64_t)length, SEEK_CUR );
             break;
       }
 
@@ -2098,7 +2099,8 @@
 int v5dReadCompressedGrid( v5dstruct *v, int time, int var,
                            float *ga, float *gb, void *compdata )
 {
-   int pos, n, k;
+   int64_t pos;
+   int n, k;
 
    if (time<0 || time>=v->NumTimes) {
       printf("Error in v5dReadCompressedGrid: bad timestep argument (%d)\n",
@@ -2118,7 +2120,7 @@
 
    /* move to position in file */
    pos = grid_position( v, time, var );
-   lseek( v->FileDesc, pos, SEEK_SET );
+   lseek( v->FileDesc, (off64_t)pos, SEEK_SET );
 
    /* read ga, gb arrays */
    read_float4_array( v->FileDesc, ga, v->Nl[var] );
@@ -2229,7 +2231,7 @@
 
    if (write_int4( v->FileDesc, tag )==0)  return 0;
    if (write_int4( v->FileDesc, length )==0)  return 0;
-   v->CurPos += 8 + length;
+   v->CurPos += 8 + (int64_t) length;
    return 1;
 }
 
@@ -2275,8 +2277,8 @@
    }
 
    /* set file pointer to start of file */
-   lseek( f, 0, SEEK_SET );
-   v->CurPos = 0;
+   lseek( f, (off64_t)0, SEEK_SET );
+   v->CurPos = (int64_t) 0;
 
    /*
     * Write the tagged header info
@@ -2377,7 +2379,7 @@
       /* We're writing to a brand new file.  Reserve 10000 bytes */
       /* for future header growth. */
       WRITE_TAG( v, TAG_END, 10000 );
-      lseek( f, 10000, SEEK_CUR );
+      lseek( f, (off64_t)10000, SEEK_CUR );
 
       /* Let file pointer indicate where first grid is stored */
       v->FirstGridPos = ltell( f );
@@ -2474,7 +2476,8 @@
                             const float *ga, const float *gb,
                             const void *compdata )
 {
-   int pos, n, k;
+   int64_t pos;
+   int n, k;
 
    /* simple error checks */
    if (v->Mode!='w') {
@@ -2495,7 +2498,7 @@
 
    /* move to position in file */
    pos = grid_position( v, time, var );
-   if (lseek( v->FileDesc, pos, SEEK_SET )<0) {
+   if (lseek( v->FileDesc, (off64_t)pos, SEEK_SET )<0) {
       /* lseek failed, return error */
       printf("Error in v5dWrite[Compressed]Grid: seek failed, disk full?\n");
       return 0;
@@ -2618,9 +2621,9 @@
    if (v->Mode=='w') {
       /* rewrite header because writing grids updates the minval and */
       /* maxval fields */
-      lseek( v->FileDesc, 0, SEEK_SET );
+      lseek( v->FileDesc, (off64_t)0, SEEK_SET );
       status = write_v5d_header( v );
-      lseek( v->FileDesc, 0, SEEK_END );
+      lseek( v->FileDesc, (off64_t)0, SEEK_END );
       close( v->FileDesc );
    }
    else if (v->Mode=='r') {
diff -ur vis5d+-1.2.1/src/v5d.h vis5d+-1.2.1_64/src/v5d.h
--- vis5d+-1.2.1/src/v5d.h	Wed Nov  7 06:53:27 2001
+++ vis5d+-1.2.1_64/src/v5d.h	Sun Jan  6 20:30:06 2002
@@ -26,6 +26,8 @@
  *
  */
 
+#include<stdlib.h>
+
 #ifndef V5D_H
 #define V5D_H
 
@@ -233,10 +235,10 @@
         unsigned int FileFormat; /* COMP5D file version or 0 if .v5d */
         int FileDesc;            /* Unix file descriptor */
         char Mode;               /* 'r' = read, 'w' = write */
-        int CurPos;              /* current position of file pointer */
-        int FirstGridPos;        /* position of first grid in file */
-        int GridSize[MAXVARS];   /* size of each grid */
-        int SumGridSizes;        /* sum of GridSize[0..NumVars-1] */
+        int64_t CurPos;              /* current position of file pointer */
+        int64_t FirstGridPos;        /* position of first grid in file */
+        int64_t GridSize[MAXVARS];   /* size of each grid */
+        int64_t SumGridSizes;        /* sum of GridSize[0..NumVars-1] */
 } v5dstruct;
